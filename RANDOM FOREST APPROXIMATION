%% Load the Dataset
data = readtable('synthetic_machining_data.csv');  % Use your dataset file

%% Prepare Features and Target Variables
X = data(:, {'Feed_Rate', 'Depth_Cut', 'Tool_Wear'}); % Inputs
Y = data.Ra;  % Output (Surface Roughness Ra)

%% Split Data into Training (80%) and Testing (20%)
cv = cvpartition(height(data), 'HoldOut', 0.2);
X_train = X(training(cv), :);
Y_train = Y(training(cv), :);
X_test = X(test(cv), :);
Y_test = Y(test(cv), :);

%% Train a Random Forest Model
RF_model = fitrensemble(X_train, Y_train, 'Method', 'Bag');  % Random Forest

%% Predict on Test Set
Y_pred = predict(RF_model, X_test);

%% Evaluate Model
MAE = mean(abs(Y_pred - Y_test));
RMSE = sqrt(mean((Y_pred - Y_test).^2));
R2 = corr(Y_pred, Y_test)^2;

fprintf('Model Performance: MAE = %.4f, RMSE = %.4f, R^2 = %.4f\n', MAE, RMSE, R2);

%% Use Model to Predict Ra for New Parameters
new_params = [0.2, 1.0, 0.3]; % [Feed Rate, Depth Cut, Tool Wear]
predicted_Ra = predict(RF_model, new_params);
fprintf('Predicted Ra for new conditions: %.4f\n', predicted_Ra);

%% Plot Feature Importance for Ra Model
importance_Ra = predictorImportance(RF_model_Ra);
figure;
bar(importance_Ra);
title('Feature Importance for Ra Model');
xticklabels({'f', 'ap', 'Tool Wear', 'vc'});
xlabel('Features');
ylabel('Importance Score');
grid on;

%% Plot Feature Importance for Rz Model
importance_Rz = predictorImportance(RF_model_Rz);
figure;
bar(importance_Rz);
title('Feature Importance for Rz Model');
xticklabels({'f', 'ap', 'Tool Wear', 'vc'});
xlabel('Features');
ylabel('Importance Score');
grid on;

%% Convert 'vc' to Numeric for Statistical Calculations
data.vc = double(data.vc); % Convert categorical to numeric

%% Statistical Calculations
mean_values = varfun(@mean, data, 'InputVariables', {'f', 'ap', 'Tool_Wear', 'vc', 'Ra', 'Rz'});
variance_values = varfun(@var, data, 'InputVariables', {'f', 'ap', 'Tool_Wear', 'vc', 'Ra', 'Rz'});
std_dev_values = varfun(@std, data, 'InputVariables', {'f', 'ap', 'Tool_Wear', 'vc', 'Ra', 'Rz'});

fprintf('Mean Values:\n'); disp(mean_values);
fprintf('Variance Values:\n'); disp(variance_values);
fprintf('Standard Deviation Values:\n'); disp(std_dev_values);

%% Load the Dataset
data = readtable('generated_machining_data.csv');  % Use the generated dataset file

data.vc = double(data.vc); % Convert categorical to numeric for calculations

%% Define Given Cutting Speeds and Generate Additional Ones
cutting_speeds = unique(data.vc);  % Extract unique cutting speeds from dataset
new_speeds = linspace(min(cutting_speeds) * 0.5, max(cutting_speeds) * 1.5, 7); % Generate 7 new speeds

%% Accurate Formulae for Missing Variables
% Surface Roughness Approximation (Ra & Rz):
% Ra = (C * f^m) * (vc^n) * (ap^p)   [empirical formula]
% Rz = k * Ra  [Rz is usually proportional to Ra]
C = 0.032; m = 0.8; n = -0.2; p = 0.1; k = 4.5;

%% Prepare Features and Target Variables
X = data(:, {'f', 'ap', 'Tool_Wear', 'vc'}); % Include Cutting Speed
Y = data(:, {'Ra', 'Rz'});  % Outputs (Surface Roughness Ra & Rz)

%% Perform 5-Fold Cross-Validation
k = 5; % Number of folds
cv = cvpartition(height(data), 'KFold', k);

MAE_Ra_vals = zeros(k, 1);
RMSE_Ra_vals = zeros(k, 1);
R2_Ra_vals = zeros(k, 1);

MAE_Rz_vals = zeros(k, 1);
RMSE_Rz_vals = zeros(k, 1);
R2_Rz_vals = zeros(k, 1);

for i = 1:k
    train_idx = training(cv, i);
    test_idx = test(cv, i);
    
    X_train = X(train_idx, :);
    Y_train = Y(train_idx, :);
    X_test = X(test_idx, :);
    Y_test = Y(test_idx, :);
    
    % Train a Random Forest Model
    RF_model_Ra = fitrensemble(X_train, Y_train.Ra, 'Method', 'Bag');  % Ra Model
    RF_model_Rz = fitrensemble(X_train, Y_train.Rz, 'Method', 'Bag');  % Rz Model
    
    % Predict on Test Set
    Y_pred_Ra = predict(RF_model_Ra, X_test);
    Y_pred_Rz = predict(RF_model_Rz, X_test);
    
    % Evaluate Model
    MAE_Ra_vals(i) = mean(abs(Y_pred_Ra - Y_test.Ra));
    RMSE_Ra_vals(i) = sqrt(mean((Y_pred_Ra - Y_test.Ra).^2));
    R2_Ra_vals(i) = corr(Y_pred_Ra, Y_test.Ra)^2;
    
    MAE_Rz_vals(i) = mean(abs(Y_pred_Rz - Y_test.Rz));
    RMSE_Rz_vals(i) = sqrt(mean((Y_pred_Rz - Y_test.Rz).^2));
    R2_Rz_vals(i) = corr(Y_pred_Rz, Y_test.Rz)^2;
end

%% Compute Mean Performance Metrics
fprintf('Ra Model: Mean MAE = %.4f, Mean RMSE = %.4f, Mean R^2 = %.4f\n', mean(MAE_Ra_vals), mean(RMSE_Ra_vals), mean(R2_Ra_vals));
fprintf('Rz Model: Mean MAE = %.4f, Mean RMSE = %.4f, Mean R^2 = %.4f\n', mean(MAE_Rz_vals), mean(RMSE_Rz_vals), mean(R2_Rz_vals));

%% Perform ANOVA Analysis
data.vc = categorical(data.vc); % Convert vc to categorical
[p_Ra_vc, ~, ~] = anova1(data.Ra, data.vc);
[p_Ra_f, ~, ~] = anova1(data.Ra, data.f);
[p_Ra_ap, ~, ~] = anova1(data.Ra, data.ap);
[p_Ra_wear, ~, ~] = anova1(data.Ra, data.Tool_Wear);

fprintf('ANOVA p-values:\n');
fprintf('Ra vs. Cutting Speed: %.4f\n', p_Ra_vc);
fprintf('Ra vs. Feed Rate: %.4f\n', p_Ra_f);
fprintf('Ra vs. Depth of Cut: %.4f\n', p_Ra_ap);
fprintf('Ra vs. Tool Wear: %.4f\n', p_Ra_wear);

%% Generate Bar Chart for ANOVA Results
anova_factors = categorical({'Cutting Speed', 'Feed Rate', 'Depth of Cut', 'Tool Wear'});
anova_p_values = [p_Ra_vc, p_Ra_f, p_Ra_ap, p_Ra_wear];
figure;
bar(anova_factors, anova_p_values);
ylabel('ANOVA p-values');
title('Factor Influence on Surface Roughness (Ra)');
grid on;

%% Save Figures
saveas(gcf, 'anova_bar_chart.png');
fprintf('ANOVA bar chart saved as anova_bar_chart.png\n');

